{"version":3,"sources":["webpack:///main.a61718a79017de95c3fba5af9c630b99b5684934.prod.bundle.js","webpack:///./src/main.browser.ts"],"names":["webpackJsonp","module","exports","__webpack_require__","main","initialHmrState","platform_browser_dynamic_1","bootstrap","app_1","AppComponent","browser_1","PLATFORM_PROVIDERS_MAIN","concat","environment_1","ENV_PROVIDERS","APP_PROVIDERS","catch","err","console","error","document","addEventListener"],"mappings":"AAAAA,cAAc,IAER,SAASC,EAAQC,EAASC,GAE/B,YCkBD,SAAAC,GAAqBC,GAEnB,MAAOC,GAAAC,UAAUC,EAAAC,aACZC,EAAAC,wBAAuBC,OACvBC,EAAAC,cACAN,EAAAO,gBAEFC,MAAM,SAAAC,GAAO,MAAAC,SAAQC,MAAMF,KA1BhC,GAAAX,GAAAH,EAA0B,KAC1BO,EAAAP,EAAwC,KACxCU,EAAAV,EAA8B,KAC9BK,EAAAL,EAA4C,IAgB5BD,GAAAE,KAAIA,CAgClBgB,UAASC,iBAAiB,mBAAoB,WAAM,MAAAjB","file":"main.a61718a79017de95c3fba5af9c630b99b5684934.prod.bundle.js","sourcesContent":["webpackJsonp([2],[\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/*\n\t * Providers provided by Angular\n\t */\n\tvar platform_browser_dynamic_1 = __webpack_require__(324);\n\tvar browser_1 = __webpack_require__(577);\n\tvar environment_1 = __webpack_require__(578);\n\tvar app_1 = __webpack_require__(516);\n\t/*\n\t * Platform and Environment\n\t * our providers/directives/pipes\n\t */\n\t/*\n\t * App Component\n\t * our top level component that holds all of our components\n\t */\n\t/*\n\t * Bootstrap our Angular app with a top level component `App` and inject\n\t * our Services and Providers into Angular's dependency injection\n\t */\n\tfunction main(initialHmrState) {\n\t    return platform_browser_dynamic_1.bootstrap(app_1.AppComponent, browser_1.PLATFORM_PROVIDERS_MAIN.concat(environment_1.ENV_PROVIDERS, app_1.APP_PROVIDERS))\n\t        .catch(function (err) { return console.error(err); });\n\t}\n\texports.main = main;\n\t/*\n\t * Vendors\n\t * For vendors for example jQuery, Lodash, angular2-jwt just import them anywhere in your app\n\t * You can also import them in vendors to ensure that they are bundled in one file\n\t * Also see custom-typings.d.ts as you also need to do `typings install x` where `x` is your module\n\t */\n\t/*\n\t * Hot Module Reload\n\t * experimental version\n\t */\n\tif (false) {\n\t    // activate hot module reload\n\t    var ngHmr = require('angular2-hmr');\n\t    ngHmr.hotModuleReplacement(main, module);\n\t    // fix for closing remodal after hot reload\n\t    jQuery('.remodal-overlay').remove();\n\t    jQuery('.remodal-wrapper').remove();\n\t}\n\telse {\n\t    // bootstrap when documetn is ready\n\t    document.addEventListener('DOMContentLoaded', function () { return main(); });\n\t}\n\n\n/***/ }\n]);\n\n\n/** WEBPACK FOOTER **\n ** main.a61718a79017de95c3fba5af9c630b99b5684934.prod.bundle.js\n **/","/*\n * Providers provided by Angular\n */\nimport { bootstrap } from '@angular/platform-browser-dynamic';\nimport { PLATFORM_PROVIDERS_MAIN } from './platform/browser';\nimport { ENV_PROVIDERS } from './platform/environment';\nimport { AppComponent, APP_PROVIDERS } from './app';\n\n/*\n * Platform and Environment\n * our providers/directives/pipes\n */\n\n/*\n * App Component\n * our top level component that holds all of our components\n */\n\n/*\n * Bootstrap our Angular app with a top level component `App` and inject\n * our Services and Providers into Angular's dependency injection\n */\nexport function main(initialHmrState?: any): Promise<any> {\n\n  return bootstrap(AppComponent, [\n    ...PLATFORM_PROVIDERS_MAIN,\n    ...ENV_PROVIDERS,\n    ...APP_PROVIDERS\n  ])\n    .catch(err => console.error(err));\n\n}\n\n/*\n * Vendors\n * For vendors for example jQuery, Lodash, angular2-jwt just import them anywhere in your app\n * You can also import them in vendors to ensure that they are bundled in one file\n * Also see custom-typings.d.ts as you also need to do `typings install x` where `x` is your module\n */\n\n\n/*\n * Hot Module Reload\n * experimental version\n */\nif ('development' === ENV && HMR === true) {\n  // activate hot module reload\n  let ngHmr = require('angular2-hmr');\n  ngHmr.hotModuleReplacement(main, module);\n  // fix for closing remodal after hot reload\n  jQuery('.remodal-overlay').remove();\n  jQuery('.remodal-wrapper').remove();\n} else {\n  // bootstrap when documetn is ready\n  document.addEventListener('DOMContentLoaded', () => main());\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/main.browser.ts\n **/"],"sourceRoot":""}