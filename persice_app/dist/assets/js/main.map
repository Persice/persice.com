{"version":3,"file":"main.bundle.js","sources":["webpack:///src/main.browser.ts"],"sourcesContent":["/*\n * Providers provided by Angular\n */\nimport { bootstrap } from '@angular/platform-browser-dynamic';\nimport { PLATFORM_PROVIDERS_MAIN } from './platform/browser';\nimport { ENV_PROVIDERS } from './platform/environment';\nimport { AppComponent, APP_PROVIDERS } from './app';\n\n/*\n * Platform and Environment\n * our providers/directives/pipes\n */\n\n/*\n * App Component\n * our top level component that holds all of our components\n */\n\n/*\n * Bootstrap our Angular app with a top level component `App` and inject\n * our Services and Providers into Angular's dependency injection\n */\nexport function main(initialHmrState?: any): Promise<any> {\n\n  return bootstrap(AppComponent, [\n    ...PLATFORM_PROVIDERS_MAIN,\n    ...ENV_PROVIDERS,\n    ...APP_PROVIDERS\n  ])\n    .catch(err => console.error(err));\n\n}\n\n/*\n * Vendors\n * For vendors for example jQuery, Lodash, angular2-jwt just import them anywhere in your app\n * You can also import them in vendors to ensure that they are bundled in one file\n * Also see custom-typings.d.ts as you also need to do `typings install x` where `x` is your module\n */\n\n\n/*\n * Hot Module Reload\n * experimental version\n */\nif ('development' === ENV && HMR === true) {\n  // activate hot module reload\n  let ngHmr = require('angular2-hmr');\n  ngHmr.hotModuleReplacement(main, module);\n  // fix for closing remodal after hot reload\n  jQuery('.remodal-overlay').remove();\n  jQuery('.remodal-wrapper').remove();\n} else {\n  // bootstrap when documetn is ready\n  document.addEventListener('DOMContentLoaded', () => main());\n}\n\n\n\n/** WEBPACK FOOTER **\n ** src/main.browser.ts\n **/"],"mappings":";;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AAEA;;;AAGA;AAEA;;;AAGA;AACA;AAEA;AAKA;AAEA;AATA;AAWA;;;;;AAKA;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;","sourceRoot":""}